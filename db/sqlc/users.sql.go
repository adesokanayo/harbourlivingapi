// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    phone,
    first_name,
    last_name,
    email,
    password,
    username,
    usertype,
    date_of_birth,
    avatar_url
) VALUES
    ($1, $2, $3, $4, $5, $6, $7,$8,$9) RETURNING id, phone, first_name, last_name, email, username, password, password_changed_at, usertype, avatar_url, date_of_birth, created_at
`

type CreateUserParams struct {
	Phone       sql.NullString `json:"phone"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	Email       string         `json:"email"`
	Password    string         `json:"password"`
	Username    string         `json:"username"`
	Usertype    int32          `json:"usertype"`
	DateOfBirth time.Time      `json:"date_of_birth"`
	AvatarUrl   sql.NullString `json:"avatar_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Phone,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Username,
		arg.Usertype,
		arg.DateOfBirth,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Usertype,
		&i.AvatarUrl,
		&i.DateOfBirth,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, phone, first_name, last_name, email, username, password, password_changed_at, usertype, avatar_url, date_of_birth, created_at FROM users
ORDER  by id
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Phone,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.PasswordChangedAt,
			&i.Usertype,
			&i.AvatarUrl,
			&i.DateOfBirth,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, phone, first_name, last_name, email, username, password, password_changed_at, usertype, avatar_url, date_of_birth, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Usertype,
		&i.AvatarUrl,
		&i.DateOfBirth,
		&i.CreatedAt,
	)
	return i, err
}

const getUsername = `-- name: GetUsername :one
SELECT id, phone, first_name, last_name, email, username, password, password_changed_at, usertype, avatar_url, date_of_birth, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Usertype,
		&i.AvatarUrl,
		&i.DateOfBirth,
		&i.CreatedAt,
	)
	return i, err
}
