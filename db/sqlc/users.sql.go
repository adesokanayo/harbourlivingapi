// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE users
SET activated = true
WHERE id = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, activateUser, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    phone,
    first_name,
    last_name,
    email,
    password,
    username,
    usertype,
    date_of_birth,
    avatar_url,
    activation_code
) VALUES
    ($1, $2, $3, $4, $5, $6, $7,$8,$9, $10) RETURNING id, phone, first_name, last_name, email, username, password, password_changed_at, usertype, avatar_url, date_of_birth, created_at, modified_at, activated, activation_code
`

type CreateUserParams struct {
	Phone          sql.NullString `json:"phone"`
	FirstName      string         `json:"first_name"`
	LastName       string         `json:"last_name"`
	Email          string         `json:"email"`
	Password       string         `json:"password"`
	Username       string         `json:"username"`
	Usertype       int32          `json:"usertype"`
	DateOfBirth    time.Time      `json:"date_of_birth"`
	AvatarUrl      sql.NullString `json:"avatar_url"`
	ActivationCode sql.NullString `json:"activation_code"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Phone,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Username,
		arg.Usertype,
		arg.DateOfBirth,
		arg.AvatarUrl,
		arg.ActivationCode,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Usertype,
		&i.AvatarUrl,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Activated,
		&i.ActivationCode,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getActivationCode = `-- name: GetActivationCode :one
SELECT id, phone, first_name, last_name, email, username, password, password_changed_at, usertype, avatar_url, date_of_birth, created_at, modified_at, activated, activation_code FROM users
WHERE activation_code = $1 LIMIT 1
`

func (q *Queries) GetActivationCode(ctx context.Context, activationCode sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getActivationCode, activationCode)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Usertype,
		&i.AvatarUrl,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Activated,
		&i.ActivationCode,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, phone, first_name, last_name, email, username, password, password_changed_at, usertype, avatar_url, date_of_birth, created_at, modified_at, activated, activation_code FROM users
ORDER  by id
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Phone,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.PasswordChangedAt,
			&i.Usertype,
			&i.AvatarUrl,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.Activated,
			&i.ActivationCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmail = `-- name: GetEmail :one
SELECT id, phone, first_name, last_name, email, username, password, password_changed_at, usertype, avatar_url, date_of_birth, created_at, modified_at, activated, activation_code FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Usertype,
		&i.AvatarUrl,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Activated,
		&i.ActivationCode,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, phone, first_name, last_name, email, username, password, password_changed_at, usertype, avatar_url, date_of_birth, created_at, modified_at, activated, activation_code FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Usertype,
		&i.AvatarUrl,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Activated,
		&i.ActivationCode,
	)
	return i, err
}

const getUsername = `-- name: GetUsername :one
SELECT id, phone, first_name, last_name, email, username, password, password_changed_at, usertype, avatar_url, date_of_birth, created_at, modified_at, activated, activation_code FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Usertype,
		&i.AvatarUrl,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Activated,
		&i.ActivationCode,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    phone = CASE WHEN $1::boolean
        THEN $2::text ELSE phone END, 
    first_name = CASE WHEN $3::boolean
        THEN $4::text ELSE first_name END,
    last_name = CASE WHEN $5::boolean
        THEN $6::text ELSE last_name END,
    email = CASE WHEN $7::boolean
        THEN $8::text ELSE email END,
    password =CASE WHEN $9::boolean
        THEN $10::text ELSE password END,
    username = CASE WHEN $11::boolean
        THEN $12::text ELSE username END,
    date_of_birth = CASE WHEN $13::boolean
        THEN $14::timestamp ELSE date_of_birth END,
    avatar_url = CASE WHEN $15::boolean
        THEN $16::text ELSE avatar_url END
    WHERE id= $17 RETURNING id, phone, first_name, last_name, email, username, password, password_changed_at, usertype, avatar_url, date_of_birth, created_at, modified_at, activated, activation_code
`

type UpdateUserParams struct {
	PhoneToUpdate       bool      `json:"phone_to_update"`
	Phone               string    `json:"phone"`
	FirstNameToUpdate   bool      `json:"first_name_to_update"`
	FirstName           string    `json:"first_name"`
	LastNameToUpdate    bool      `json:"last_name_to_update"`
	LastName            string    `json:"last_name"`
	EmailToUpdate       bool      `json:"email_to_update"`
	Email               string    `json:"email"`
	PasswordToUpdate    bool      `json:"password_to_update"`
	Password            string    `json:"password"`
	UsernameToUpdate    bool      `json:"username_to_update"`
	Username            string    `json:"username"`
	DateOfBirthToUpdate bool      `json:"date_of_birth_to_update"`
	DateOfBirth         time.Time `json:"date_of_birth"`
	AvatarUrlToUpdate   bool      `json:"avatar_url_to_update"`
	AvatarUrl           string    `json:"avatar_url"`
	ID                  int32     `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.PhoneToUpdate,
		arg.Phone,
		arg.FirstNameToUpdate,
		arg.FirstName,
		arg.LastNameToUpdate,
		arg.LastName,
		arg.EmailToUpdate,
		arg.Email,
		arg.PasswordToUpdate,
		arg.Password,
		arg.UsernameToUpdate,
		arg.Username,
		arg.DateOfBirthToUpdate,
		arg.DateOfBirth,
		arg.AvatarUrlToUpdate,
		arg.AvatarUrl,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Usertype,
		&i.AvatarUrl,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Activated,
		&i.ActivationCode,
	)
	return i, err
}
