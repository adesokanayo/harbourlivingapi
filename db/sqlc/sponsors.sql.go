// Code generated by sqlc. DO NOT EDIT.
// source: sponsors.sql

package db

import (
	"context"
)

const createSponsor = `-- name: CreateSponsor :one
INSERT INTO sponsors (
user_id
) VALUES
    ($1) RETURNING id, user_id, created_at
`

func (q *Queries) CreateSponsor(ctx context.Context, userID int32) (Sponsor, error) {
	row := q.db.QueryRowContext(ctx, createSponsor, userID)
	var i Sponsor
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	return i, err
}

const deleteSponsor = `-- name: DeleteSponsor :exec
DELETE from sponsors
WHERE id = $1
`

func (q *Queries) DeleteSponsor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSponsor, id)
	return err
}

const getSponsor = `-- name: GetSponsor :one
SELECT id, user_id, created_at from sponsors
WHERE id = $1
`

func (q *Queries) GetSponsor(ctx context.Context, id int32) (Sponsor, error) {
	row := q.db.QueryRowContext(ctx, getSponsor, id)
	var i Sponsor
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	return i, err
}

const getSponsorByEvent = `-- name: GetSponsorByEvent :many
SELECT id, event_id, sponsor_id, created_at from events_sponsors
WHERE event_id = $1
`

func (q *Queries) GetSponsorByEvent(ctx context.Context, eventID int32) ([]EventsSponsor, error) {
	rows, err := q.db.QueryContext(ctx, getSponsorByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventsSponsor{}
	for rows.Next() {
		var i EventsSponsor
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.SponsorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkSponsorToEvent = `-- name: LinkSponsorToEvent :one
INSERT INTO events_sponsors(
sponsor_id,event_id) 
VALUES($1, $2 ) RETURNING id, event_id, sponsor_id, created_at
`

type LinkSponsorToEventParams struct {
	SponsorID int32 `json:"sponsor_id"`
	EventID   int32 `json:"event_id"`
}

func (q *Queries) LinkSponsorToEvent(ctx context.Context, arg LinkSponsorToEventParams) (EventsSponsor, error) {
	row := q.db.QueryRowContext(ctx, linkSponsorToEvent, arg.SponsorID, arg.EventID)
	var i EventsSponsor
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.SponsorID,
		&i.CreatedAt,
	)
	return i, err
}

const updateSponsor = `-- name: UpdateSponsor :exec
UPDATE events_sponsors
set event_id= $1
WHERE id=$2
`

type UpdateSponsorParams struct {
	EventID int32 `json:"event_id"`
	ID      int32 `json:"id"`
}

func (q *Queries) UpdateSponsor(ctx context.Context, arg UpdateSponsorParams) error {
	_, err := q.db.ExecContext(ctx, updateSponsor, arg.EventID, arg.ID)
	return err
}
