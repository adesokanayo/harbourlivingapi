// Code generated by sqlc. DO NOT EDIT.
// source: venue.sql

package db

import (
	"context"
)

const createVenue = `-- name: CreateVenue :one
INSERT INTO venue (
    name,
    address,
    postal_code,
    city,
    province,
    country_code
) VALUES
    ($1, $2, $3, $4, $5, $6) RETURNING id, name, address, postal_code, city, province, country_code
`

type CreateVenueParams struct {
	Name        string `json:"name"`
	Address     string `json:"address"`
	PostalCode  string `json:"postal_code"`
	City        string `json:"city"`
	Province    string `json:"province"`
	CountryCode string `json:"country_code"`
}

func (q *Queries) CreateVenue(ctx context.Context, arg CreateVenueParams) (Venue, error) {
	row := q.db.QueryRowContext(ctx, createVenue,
		arg.Name,
		arg.Address,
		arg.PostalCode,
		arg.City,
		arg.Province,
		arg.CountryCode,
	)
	var i Venue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.PostalCode,
		&i.City,
		&i.Province,
		&i.CountryCode,
	)
	return i, err
}

const deleteVenue = `-- name: DeleteVenue :exec
DELETE FROM venue
WHERE id = $1
`

func (q *Queries) DeleteVenue(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteVenue, id)
	return err
}

const getAllVenues = `-- name: GetAllVenues :many
SELECT id, name, address, postal_code, city, province, country_code FROM venue
ORDER  by id
`

func (q *Queries) GetAllVenues(ctx context.Context) ([]Venue, error) {
	rows, err := q.db.QueryContext(ctx, getAllVenues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Venue{}
	for rows.Next() {
		var i Venue
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.PostalCode,
			&i.City,
			&i.Province,
			&i.CountryCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVenue = `-- name: GetVenue :one
SELECT id, name, address, postal_code, city, province, country_code FROM venue
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVenue(ctx context.Context, id int32) (Venue, error) {
	row := q.db.QueryRowContext(ctx, getVenue, id)
	var i Venue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.PostalCode,
		&i.City,
		&i.Province,
		&i.CountryCode,
	)
	return i, err
}
