// Code generated by sqlc. DO NOT EDIT.
// source: artist.sql

package db

import (
	"context"
)

const createArtist = `-- name: CreateArtist :one
INSERT INTO artists (
user_id
) VALUES
    ($1) RETURNING id, user_id, display_name, avatar_url, short_bio, created_at
`

func (q *Queries) CreateArtist(ctx context.Context, userID int32) (Artist, error) {
	row := q.db.QueryRowContext(ctx, createArtist, userID)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.ShortBio,
		&i.CreatedAt,
	)
	return i, err
}

const deleteArtist = `-- name: DeleteArtist :exec
DELETE from artists
WHERE id = $1
`

func (q *Queries) DeleteArtist(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteArtist, id)
	return err
}

const getArtist = `-- name: GetArtist :one
SELECT id, user_id, display_name, avatar_url, short_bio, created_at from artists
WHERE id = $1
`

func (q *Queries) GetArtist(ctx context.Context, id int32) (Artist, error) {
	row := q.db.QueryRowContext(ctx, getArtist, id)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.ShortBio,
		&i.CreatedAt,
	)
	return i, err
}

const getArtistByEvent = `-- name: GetArtistByEvent :many
SELECT id, event_id, artist_id, created_at from events_artists
WHERE event_id = $1
`

func (q *Queries) GetArtistByEvent(ctx context.Context, eventID int32) ([]EventsArtist, error) {
	rows, err := q.db.QueryContext(ctx, getArtistByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventsArtist{}
	for rows.Next() {
		var i EventsArtist
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.ArtistID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkArtistToEvent = `-- name: LinkArtistToEvent :one
INSERT INTO events_artists(
artist_id,event_id)
VALUES($1, $2 ) RETURNING id, event_id, artist_id, created_at
`

type LinkArtistToEventParams struct {
	ArtistID int32 `json:"artist_id"`
	EventID  int32 `json:"event_id"`
}

func (q *Queries) LinkArtistToEvent(ctx context.Context, arg LinkArtistToEventParams) (EventsArtist, error) {
	row := q.db.QueryRowContext(ctx, linkArtistToEvent, arg.ArtistID, arg.EventID)
	var i EventsArtist
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.ArtistID,
		&i.CreatedAt,
	)
	return i, err
}

const updateArtist = `-- name: UpdateArtist :one
UPDATE artists SET
 display_name = CASE WHEN $1::boolean
        THEN $2::text ELSE display_name END, 
 avatar_url = CASE WHEN $3::boolean
        THEN $4::text ELSE avatar_url END,
 short_bio = CASE WHEN $5::boolean
        THEN $6::text ELSE short_bio END
WHERE id = $7 RETURNING id, user_id, display_name, avatar_url, short_bio, created_at
`

type UpdateArtistParams struct {
	DisplayNameToUpdate bool   `json:"display_name_to_update"`
	DisplayName         string `json:"display_name"`
	AvatarUrlToUpdate   bool   `json:"avatar_url_to_update"`
	AvatarUrl           string `json:"avatar_url"`
	ShortBioToUpdate    bool   `json:"short_bio_to_update"`
	ShortBio            string `json:"short_bio"`
	ID                  int32  `json:"id"`
}

func (q *Queries) UpdateArtist(ctx context.Context, arg UpdateArtistParams) (Artist, error) {
	row := q.db.QueryRowContext(ctx, updateArtist,
		arg.DisplayNameToUpdate,
		arg.DisplayName,
		arg.AvatarUrlToUpdate,
		arg.AvatarUrl,
		arg.ShortBioToUpdate,
		arg.ShortBio,
		arg.ID,
	)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.ShortBio,
		&i.CreatedAt,
	)
	return i, err
}

const updateEventArtist = `-- name: UpdateEventArtist :exec
UPDATE events_artists
set event_id= $1
WHERE id=$2
`

type UpdateEventArtistParams struct {
	EventID int32 `json:"event_id"`
	ID      int32 `json:"id"`
}

func (q *Queries) UpdateEventArtist(ctx context.Context, arg UpdateEventArtistParams) error {
	_, err := q.db.ExecContext(ctx, updateEventArtist, arg.EventID, arg.ID)
	return err
}
