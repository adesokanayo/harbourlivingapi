// Code generated by sqlc. DO NOT EDIT.
// source: hosts.sql

package db

import (
	"context"
)

const createHost = `-- name: CreateHost :one
INSERT INTO hosts (
user_id
) VALUES
    ($1) RETURNING id, user_id, created_at
`

func (q *Queries) CreateHost(ctx context.Context, userID int32) (Host, error) {
	row := q.db.QueryRowContext(ctx, createHost, userID)
	var i Host
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	return i, err
}

const deleteHost = `-- name: DeleteHost :exec
DELETE from hosts
WHERE id = $1
`

func (q *Queries) DeleteHost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteHost, id)
	return err
}

const getHost = `-- name: GetHost :one
SELECT id, user_id, created_at from hosts
WHERE id = $1
`

func (q *Queries) GetHost(ctx context.Context, id int32) (Host, error) {
	row := q.db.QueryRowContext(ctx, getHost, id)
	var i Host
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	return i, err
}

const getHostByEvent = `-- name: GetHostByEvent :many
SELECT id, event_id, host_id, created_at from events_hosts
WHERE event_id = $1
`

func (q *Queries) GetHostByEvent(ctx context.Context, eventID int32) ([]EventsHost, error) {
	rows, err := q.db.QueryContext(ctx, getHostByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventsHost{}
	for rows.Next() {
		var i EventsHost
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.HostID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkHostToEvent = `-- name: LinkHostToEvent :one
INSERT INTO events_hosts(
host_id,event_id)
VALUES($1, $2 ) RETURNING id, event_id, host_id, created_at
`

type LinkHostToEventParams struct {
	HostID  int32 `json:"host_id"`
	EventID int32 `json:"event_id"`
}

func (q *Queries) LinkHostToEvent(ctx context.Context, arg LinkHostToEventParams) (EventsHost, error) {
	row := q.db.QueryRowContext(ctx, linkHostToEvent, arg.HostID, arg.EventID)
	var i EventsHost
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.HostID,
		&i.CreatedAt,
	)
	return i, err
}

const updateHost = `-- name: UpdateHost :exec
UPDATE events_hosts
set event_id= $1
WHERE id=$2
`

type UpdateHostParams struct {
	EventID int32 `json:"event_id"`
	ID      int32 `json:"id"`
}

func (q *Queries) UpdateHost(ctx context.Context, arg UpdateHostParams) error {
	_, err := q.db.ExecContext(ctx, updateHost, arg.EventID, arg.ID)
	return err
}
