// Code generated by sqlc. DO NOT EDIT.
// source: categories.sql

package db

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    description,
    image,
    status
) VALUES
  ( $1, $2, $3) RETURNING id, description, image, status, created_at
`

type CreateCategoryParams struct {
	Description string         `json:"description"`
	Image       sql.NullString `json:"image"`
	Status      int32          `json:"status"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.Description, arg.Image, arg.Status)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Image,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE  from categories
where id =$1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT id, description, image, status, created_at FROM categories
`

func (q *Queries) GetCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Image,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, description, image, status, created_at FROM categories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Image,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateCategoryStatus = `-- name: UpdateCategoryStatus :exec
UPDATE categories
set status = $1
where id = $2
`

type UpdateCategoryStatusParams struct {
	Status int32 `json:"status"`
	ID     int32 `json:"id"`
}

func (q *Queries) UpdateCategoryStatus(ctx context.Context, arg UpdateCategoryStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateCategoryStatus, arg.Status, arg.ID)
	return err
}
