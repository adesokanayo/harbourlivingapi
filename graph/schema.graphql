# build-in directive by Gqlgen
directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

scalar Time
scalar DateTime
scalar Date

enum UserTypeOptions {
ATTENDEE
HOST
SPONSOR
ADMIN

}

enum EventTypeOptions {
FREE
PAID
}

enum StatusOptions {
DRAFT
PUBLISHED
APPROVED
REJECTED
COMPLETED
}


type User {
        id: ID!
        phone: String
        first_name: String!
        last_name: String!
        email: String!
        username: String!
        password: String!
        usertype: UserTypeOptions!
        avatar : String!
        favorites_venues: [Venue] 
        favorites_events: [Event]  
}

type Usertype {
        id: ID!
        description: UserTypeOptions!
        status: Int
        }

input UpdateUser {
        id: ID!
        phone: String
        first_name: String
        last_name: String
        email: String
        username: String
        password: String
        avatar : String 
}

type EventType {
        id: ID!
        description: String!
        status: Int!
        }

type Category {
        id: ID!
        description: String!
        image: String!
        status: Int!
        }

input NewCategory {
        description: String!
        image: String
        status: Int!
}

type Event {
        id: ID!
        title: String!
        description: String!
        banner_image: String!
        startDate:   DateTime!
        endDate:     DateTime!
        venue: Venue!
        type: EventTypeOptions!
        user_id: ID!
        category: Int!
        sponsors : [Sponsor]
        hostID: Int!
        tickets : [Ticket]
        status: StatusOptions!
        images: [Image]
        videos: [Video]
        meta: metadata
        promoted: Boolean!
        }

type Venue {
        id: ID!
        name: String!
        address: String
        postal_code:String
        city: String
        province: String
        country_code: String
        Longitude: Float
        Latitude : Float
        banner_image: String
        venue_owner: Int!
        rating: Float
        status: StatusOptions!
        }

input Login {
        email: String!
        password: String!
}

type LoginResponse{
      token: String
      user : User
      success: Boolean!
      message: String
}

type Image{
        id: ID!
        event_id: ID!
        name: String
        url: String!
}

input NewImage{
        name: String
        url: String!
}
type Video{
        id: ID!
        event_id: ID!
        name: String
        url: String!
}

input NewVideo{
        name: String
        url: String!
}

input NewVenue {
        name: String!
        address: String
        postal_code:String
        city: String
        province: String
        country_code: String
        venue_owner: Int!
        banner_image: String
        longitude: Float
        latitude: Float
        rating : Float
        status :StatusOptions
}

input GetEvents{
        category: Int
        title: String
        startDateAsc: Boolean
        startDateDesc: Boolean
        endDateAsc: Boolean
        endDateDesc: Boolean
        pageNumber: Int!
        limit: Int!

}

input GetVenue{
        pageNumber: Int!
        limit: Int!
}

input GetEventsByLocation{
        latitude: Float!
        longitude: Float!,
        miles: Int!
}

input NewEvent {
        title: String!
        description: String!
        banner_image: String!
        startDate:   DateTime!
        endDate:     DateTime!
        venue: Int!
        type: Int!
        user_id: ID!
        category: Int!
        status: StatusOptions
        images: [NewImage]
        videos: [NewVideo]   
        tickets : [NewTicket]     
}

input UpdateEvent {
        id: Int!
        title: String
        description: String
        banner_image: String
        startDate:   DateTime
        endDate:     DateTime
        venue: Int
        type: Int
        category: Int
        status: StatusOptions
        images: [NewImage]
        videos: [NewVideo]        
}

input UpdateVenue {
        id: Int!
        name: String
        address: String
        postal_code:String
        city: String
        province: String
        country_code: String
        url: String
        longitude: Float
        latitude: Float 
        rating: Float 
        status: StatusOptions   
}

input RefreshTokenInput{
        token: String!
}


input NewUser {
        phone: String
        first_name: String!
        last_name: String!
        email: String!
        username: String!
        password: String!
        usertype: UserTypeOptions!
        avatar: String

}

type Sponsor {
        id: ID!
        user_id: Int!
        display_name: String
        avatar: String
        short_bio: String
        events: [Event]!
}

input NewSponsor {
  user_id : Int!
  event_id: Int!
}

type Host {
        id: ID!
        user_id: Int!
        display_name: String
        avatar: String
        short_bio: String
        events: [Event]!
}

input NewHost {
        user_id : Int!
        event_id: Int!
}

type Artist {
        id: ID!
        user_id: Int!
        display_name: String
        avatar: String
        short_bio: String
        events: [Event]!
}

input NewArtist {
        user_id : Int!
        event_id: Int!
}

type UpdateEventState{
        event_id: Int!
        event_status: StatusOptions!
}

type Ticket {
        id: ID!
        name: String!
        price: Float!
        event_id: Int!
        currency: String!
        description: String
}

type EventFavorite{
  id : ID!
  event_id : Int!
  user_id: Int!
}

type VenueFavorite{
  id : ID!
  venue_id : Int!
  user_id: Int!
}

type Plan {
        id: ID!
        name: String!
        description: String!
        price: Float!
        no_of_days: Int!
}

type Promotion {
        id: ID!
        user_id: ID!
        event_id : ID!
        start_date : DateTime!
        end_date: DateTime!
}

type News {
        id: ID!
        title: String!
        description : String!
        feature_image : String!
        body : String!
        user_id : ID!
        publish_date: DateTime!
        tags : String
        status: StatusOptions!
}

type Schedule {
        id: ID!
        event_id: ID!
        date : DateTime!
        start_time : Time!
        end_time : Time!
}

type DayPlan {
        id: ID!
        start_time: Time!
        end_time : Time!
        schedule_id :ID!
        title : String
        description : String
        performer_name : String
}

input NewTicket {
        name: String!
        price: Float!
        event_id: Int!
        currency: String!
        description: String 
}

input UpdateEventStatus{
    event_id: Int!
    event_status: StatusOptions!
}

input UpdateHost{
    id: Int!
    avatar: String
    display_name: String
    short_bio: String
}

input UpdateArtist{
    id: Int!
    avatar: String
    display_name: String
    short_bio: String
}

input UpdateSponsor{
    id: Int!
    avatar: String
    display_name: String
    short_bio: String
}

input NewEventFavorite{
    event_id: Int!
    user_id: Int!
}

input NewVenueFavorite{
    venue_id: Int!
    user_id: Int!
}

input NewPlan {
        name: String!
        description: String!
        price: Float!
        no_of_days: Int!
}

input NewPromotion {
        user_id: ID!
        event_id : ID!
        plan_id : ID!
        start_date : DateTime!
        end_date: DateTime!
}

input UpdatePlan {
        id: ID!
        name: String
        description: String
        price: Float
        no_of_days: Int
}

input UpdatePromotion {
        id: ID!
        user_id: ID
        event_id : ID
        start_date : DateTime
        end_date: DateTime
}

input NewNews {
        title: String!
        description : String!
        feature_image : String!
        body : String!
        user_id : ID!
        publish_date: DateTime!
        tags : String
        status: StatusOptions!
}

input UpdateNews {
        id: ID!
        title: String
        description : String
        feature_image : String
        body : String
        publish_date: DateTime
        tags : String
        status: StatusOptions
}

type metadata {
  total_view: ID!
  total_favorite: ID!
}

type EventView{
  id : ID!
  event_id : Int!
  user_id: Int!
}

input NewEventView{
    event_id: Int!
    user_id: Int!
}


input NewSchedule {
        event_id: ID!
        date : Date!
        start_time : Time!
        end_time : Time!
}

input  NewDayPlan {
        start_time: Time!
        end_time : Time!
        schedule_id :ID!
        title : String
        description : String
        performer_name : String
}


input UpdateSchedule {
        id :ID!
        date : Date
        start_time : Time
        end_time : Time
}

input  UpdateDayPlan {
        id :ID!
        start_time: Time
        end_time : Time
        title : String
        description : String
        performer_name : String
}
input  UnfavoriteEvent {
        event_id :ID!
        user_id: ID!

}

input  UnfavoriteVenue {
        venue_id :ID!
        user_id:ID!

}


type Mutation {
        createCategory(input : NewCategory!): Category!
        createVenue(input: NewVenue!): Venue!
        createUser(input: NewUser!): User!
        createEvent(input: NewEvent!):Event!
        createTicket(input: NewTicket!): Ticket!
        createSponsorForEvent(input: NewSponsor!): Sponsor!
        createEventFavorite(input : NewEventFavorite!): EventFavorite!
        createVenueFavorite(input : NewVenueFavorite!): VenueFavorite!
        createPlan(input : NewPlan!): Plan!
        createPromotion(input : NewPromotion!): Promotion!
        createNews(input :NewNews!): News!
        createEventView(input : NewEventView!): EventView!
        createSchedule(input: NewSchedule!): Schedule!
        createDayPlan(input: NewDayPlan!): DayPlan!
    
        """ update """ 
        updateUser(input: UpdateUser!): User!
        updateEvent(input: UpdateEvent!):Event!
        updateEventStatus(input: UpdateEventStatus!): UpdateEventState!
        updateArtist(input:UpdateArtist! ): Artist!
        updateHost(input:UpdateHost! ): Host!
        updateSponsor(input:UpdateSponsor! ): Sponsor!
        updatePlan(input : UpdatePlan! ): Plan!
        updatePromotion(input : UpdatePromotion!): Promotion!
        updateSchedule(input: UpdateSchedule!): Schedule!
        updateDayPlan(input: UpdateDayPlan!): DayPlan!

        """ delete """ 
        deleteEvent(input: ID!): Boolean!
        deleteNews (input: ID!): Boolean!
        deletePlan (input: ID!): Boolean!
        deletePromotion (input: ID!): Boolean!
        deleteTicket (input: ID!): Boolean!
        deleteDayPlan(input:ID!):Boolean!
        deleteSchedule(input: ID!):Boolean!
        UnfavoriteEvent(input : UnfavoriteEvent!): Boolean!
        UnfavoriteVenue(input : UnfavoriteVenue!): Boolean!

        """ operations """ 
        login(input: Login!): LoginResponse
        refreshToken(input: RefreshTokenInput!): String
}

type Query {
        getUser(input: ID!): User  @goField(forceResolver: true)
        getEvent(input: ID!): Event 
        getVenue(input: ID!): Venue
        getUsers : [User!]
        getAllEvents(input: GetEvents!): [Event!]
        getAllVenues: [Venue!]
        getEventsByLocation(input: GetEventsByLocation!): [Event!]
        getCategory( input: ID!): Category!
        getCategories: [Category!]
        getAllNews: [News!]
        getAllPlans: [Plan!] 
        getAllPromotions: [Promotion!]
        getPromotion(input: ID!): Promotion!
        getPlan(input: ID!): Plan!
        getNews(input: ID!): News!
        
}