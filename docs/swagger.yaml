basePath: /api/v1
definitions:
  api.loginUserResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/api.userResponse'
    type: object
  api.userResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      password_changed_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: adesokanayo@gmail.com
    name: Ayo Adesokan
    url: http://www.swagger.io/support
  description: This is a harbour living API .
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: HarbourLiving API
  version: "1.0"
paths:
  /login/:
    post:
      consumes:
      - application/json
      description: Authenticate a user returns a token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.loginUserResponse'
      summary: Authenticate a user with username and password and generate token
      tags:
      - Login
  /users/:
    post:
      consumes:
      - application/json
      description: Create a user and returns a token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
      summary: Create a user
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
